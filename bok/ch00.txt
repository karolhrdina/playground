= In protocols we trust

In a core of every system are protocols (or rules, contracts, laws, ...). Yet
many computer systems document them badly as they have been added ad-hoc and in
a big hurry by inoncent developers. Those internal contracts are hard to use,
impossible to test and they make a developer's life less pleasant.

The core basic of https://42ity.org[42ITy project] are the protocols

== REST API

http://42ity.org/doc/rest/42ity_rest_api.html[RESTfull API] powers user
interface to the outside world allowing project to be integrated with third
party applications like user interface, monitoring, asset management and other
systems.

== Messaging protocols

https://github.com/42ity/fty-proto[fty-proto] is the
https://github.com/42ity/fty-proto/blob/master/src/fty_proto.bnf[formal
protocol specification]. As well as the reference implementation of messaging
protocols available as shared C library, ready for the developers to be used.

== Malamute broker

While https://zeromq.org[ZeroMQ] is a great end to end brokerless messaging
platform, in 42ITy we needed something can abstract publish / subscribe and
request / reply messaging patterns into one socket.

The heart of the system is https://github.com/zeromq/malamute[Malamute broker].
Written by https://hintjens.com[Peiter Hintjens], editor of Advanced Messaging
Queuing Protocol 0.9 and author of first and fastest broker
https://github.com/imatix/openamq[OpenAMQ]. It is a tiny and simple broker providing three major communicating paterns for the clients

=== STREAM DELIVER

The 1:N communication pattern. Malamute client, which wants to publish message
on a stream will register itself (mlm_client_set_publisher) and starts sending
messages with given subject. Each client can publish on one stream only.

The subscribed clients can subscribe to one or more streams and a pattern
regular expression. So they will get messages from given stream where subject
matches.

    +-------------+      +-------------+      +-------------+
    |             |      |             |      |             |
    | Publisher1  |      | Subscriber1 |      | Subscriber2 |
    | on STREAM   |      | from STREAM |      | from STREAM |
    |             |      | H.*         |      | X.*         |
    +-------------+      +-------------+      +-------------+
    [Subject: Hello]     [Subject: Hello]
    [World]              [World]
           |                   ^
           |                   |
           V                   |
    =========================================================
    |   STREAM                                              |
    =========================================================


=== MAILBOX DELIVER

Each Malamute client register itself with unique MAILBOX name. This is internal
storage inside broker, where other clients can send messages. Client then CAN
reply to their MAILBOX. Unlike STREAMs MAILBOX messages are stored inside the broker
waiting on a client to join.

=== SERVICE DELIVER SERVICE
Is similar to MAILBOX, however there are usually
more clients registered as the same worker. Broker then sends incoming requests
via round robin algortihm, so workers may work in a parallel.

== 42ITy main messages

There are three baisc building blocks for each such app

=== Metrics

Metrics are typically data comes from measured devices, like temperature,
humidity, current, power, ... . They are usually polled from the target device
and published on METRICS stream (FTY_PROTO_STREAM_METRICS).

.Metric message
|===
|Name   |Type   |Description

|aux
|hash
|Auxiliar data

|type
|string
|Type of metric send (temperature, humidity, power.load, ...)

|element_src
|string
|Name of source element to which metrics are bound to

|value
|string
|Value of metric as plain string

|unit
|string
|Unit of metric (i.e. C, F or K for temperature)

|ttl
|number 4
|Metric time to live seconds (i.e. How long is the metric valid - At the latest how long from now should i get a new one)
|===

TODO: document components producing and consimeing metrics, known extended attributes

=== ALERTS

Alerts are generated from metrics, or by defined states. Those events are less
common in the system (ideally monitored systems does not produce any). They are
produced by different components.

.Alert message
|===
|Name   |Type   |Description

|aux
|hash
|Auxiliar data

|rule
|string
|a rule name, that triggers this alert

|element_src
|string
|name of the element, where alert was detected. Most of the time is would be asset element name

|state
|string
|state of the alert. Possible values are ACTIVE/ACK-WIP/ACK-IGNORE/ACK-PAUSE/ACK-SILENCE/RESOLVED

|severity
|string
|severity of the alert. Possible values are INFO/WARNING/CRITICAL

|description
|string
|a description of the alert

|time
|number 8
|ALERT date/time

|action
|string
|list of strings separated by "/" ( EMAIL/SMS ) ( is optional and can be empty )
|===

TODO: document components producing and consimeing alerts, known extended attributes

=== ASSETS
Assets contains all the metadata about monitored devices. 42ITy project uses
key/value storage system, so most of the information are optional data in
extended attributes of particular asset. A lot of components refuse to work on
unknown asset, so messages are regularly sent each hour.

.Alert message
|===
|Name   |Type   |Description

|name
|string
|asset name

|operation
|string
|operation name (CREATE, UPDATE, DELETE, INVENTORY, RETIRE)

|aux
|hash
|Auxiliar data

|ext
|hash
|Extended attributes

TODO: document components producing and consimeing assets, known extended attributes

== Example of MAILBOX
- sendmail?
